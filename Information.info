Lessons:
    https://www.youtube.com/playlist?list=PLAma_mKffTOR5o0WNHnY0mTjKxnCgSXrZ

    working set:
    thymeleaf-spring6
    tomcat-10.1.11
    spring 6.0.11

Lesson 15:
    1. Create Maven project with webapp archetype (IntelliJ IDEA Ultimate edition)
    2. Download and unzip tomcat for win64 version 9.0.78
    3. Run -> Edit configuration -> Tomcat server -> local
    4. Application server -> Configure -> Tomcat Home
    5. fix -> war exploded
    6. Application context = empty string
    7. Name = {make your name} -> apply -> OK
    8. Restart IntelliJ IDEA
    9. Run -> server is starting
    10. Add dependencies to pom.xml:
        - spring-core 6.0.11
        - spring-context 6.0.11
        - spring-web 6.0.11
        - spring-webmvc 6.0.11
        - thymeleaf-spring5
    11. Paste code to web.xml
    12. Create WEN-INF/applicationContextMVC.xml
    13. Paste code to applicationContextMVC.xml
    14. Create folder java and mark it as a source root
    15. Create package by.springcourse
    16. Create class HelloController
    17. Add annotation @Controller
    18. Add method with annotation @GetMapping
    19. Create folder views
    20. Create view hello_world.html
    21. Paste code to hello_world.html
    22. Run tomcat server
    23. Open url http://localhost:8085/hello-world -> Hello world!!!

Lesson 16:
    1. Create package config
    2. Create class MySpringMvcDispatcherServletInitializer extends AbstractAnnotationConfigDispatcherServletInitializer
    3. Realize methods from extend class
    4. Create class SpringConfig with annotation @Configuration, @ComponentScan and @EnableWebMvc
    5. Paste code to class SpringConfig
    6. Upgrade class MySpringMvcDispatcherServletInitializer
    7. Add dependencies jakarta.servlet-api and javax.servlet-api
    8. Del xml files
    9. Run tomcat server
    10. Open url http://localhost:8085/hello-world -> Hello world!!!

Lesson 17:
    1. Delete view and controller
    2. Create directory controllers
    3. Create class FirstController with annotation @Controller
    4. Create 2 methods helloPage and goodbyePage
    5. Create folder first in views
    6. Create new html files hello.html and goodbye.html
    7. Create links in files to go to each other
    8. Run tomcat server -> Its working!
    9. Create new controller SecondController with 1 method exit
    10. Create view and html file
    11. Add links to exist html files
    12. Run tomcat server -> Its working!
    13. Add @RequestMapping to FirstController
    14. Add new urls to views
    15. Run tomcat server -> Its working!

Lesson 19:
    1. Edit method helloPage with adding GET parameters
    2. Run tomcat server
    3. Open url http://localhost:8085/first/hello?name=Alex&surname=Smith -> Hello Alex Smith (in console)
    4. Edit method goodbyePage with adding GET parameters (2nd way)
    5. Run tomcat server
    6. Open url http://localhost:8085/first/goodbye?name=Alex&surname=Smith -> Hello Alex Smith (in console)
    7. Edit links with GET parameters in views
    8. Run tomcat server -> Its working!

Lesson 20:
    1. Edit method goodbyePage with adding Model
    2. Edit goodbye.html
    3. Run tomcat server -> Its working!
    Homework: Create calculator page -> Done

Lesson 21:
    1. Delete from project all controllers and all views
    2. Create new controller PeopleController
    3. Create new model Person
    4. Create new DAO PersonDAO with temporary DB = List<Person>
    5. Add peoples to List
    6. Create views
    7. Run tomcat server -> Its working!

Lesson 22:
    1. Add methods to controller:
    2. Add empty constructor to Person
    3. Add method save to DAO
    4. Add view new
    5. Run tomcat server -> Its working!

Lesson 23:
    1. Add method edit to controller
    2. Add view edit
    3. Add method update to controller
    4. Add method update to DAO
    5. Paste code with filter to MySpringMvcDispatcherServletInitializer
    6. Run tomcat server -> Its working!
    7. Edit view show
    8. Add method delete to controller
    9. Add method delete to DAO
    10. Edit view index
    11. Run tomcat server -> Its working!

Lesson 24:
    1. Edit files Person, index, new, edit, PersonDAO and show with adding 2 field (age and email)
    2. Run tomcat server -> Its working!
    3. Add dependency hibernate-validator
    4. Add validate annotations to class Person
    5. Edit with validation class PeopleController
    6. Edit views new and edit with validation
    7. Run tomcat server -> Its working!

Lesson 25:
    1. Install PostGreSQL and PGAdmin
    2. Create database in PGAdmin
    3. Connect to database in IDEA
    4. Create table in database with SQL code //create table Person(id int, name varchar, age int, email varchar)//
    5. Add persons to database with SQL code //insert into person values(1, 'Tom', 18, 'tom@bymail.com')//
    6. Check line in table with SQL code //select * from person//
    7. Add dependency postgresql
    8. Edit 2 methods in DAO with database connection
    9. Run tomcat server -> Its working!

Lesson 26:
    1. Edit other methods in DAO with database connection
    2. Run tomcat server -> Its working!